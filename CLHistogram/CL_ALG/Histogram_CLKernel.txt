"\n"
"#define BIN_SIZE 256\n"
"#define ELEMENTS_TO_PROCESS 256\n"
"\n"
"__kernel void Histogram_CL(__global int *a_pdOutHis,\n"
"                           __global unsigned char *a_pucInImg,\n"
"                           int a_dWidth,int a_dHeight)\n"
"{\n"
"    __local int sharedArray[BIN_SIZE];\n"
"\n"
"    size_t localId = get_local_id(0);\n"
"    size_t globalId = get_global_id(0);\n"
"    size_t groupId = get_group_id(0);\n"
"    size_t groupSize = get_local_size(0);\n"
"\n"
"    int elements_to_process = ELEMENTS_TO_PROCESS;\n"
"    int total_pixels = a_dWidth*a_dHeight;\n"
"\n"
"    /* initialize shared array to zero */\n"
"    sharedArray[localId] = 0;\n"
"\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"\n"
"    int groupOffset = groupId * groupSize * ELEMENTS_TO_PROCESS;\n"
"\n"
"    /* For the last work group calculate the number of elements required */\n"
"    if(groupId == (get_num_groups(0) - 1))\n"
"        elements_to_process = ((total_pixels - groupOffset) + groupSize - 1) /groupSize;\n"
"\n"
"    /* calculate thread-histograms */\n"
"    for(int i = 0; i < elements_to_process; ++i)\n"
"    {\n"
"        int index = groupOffset + i * groupSize + localId;\n"
"        if(index > total_pixels)\n"
"            break;\n"
"        //Coalesced read from global memory\n"
"        uchar value = a_pucInImg[index];\n"
"        atomic_inc(&sharedArray[value]);\n"
"    }\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"\n"
"    //Coalesced write to global memory\n"
"    atomic_add(&a_pdOutHis[localId], sharedArray[localId]);\n"
"\n"
"    return;\n"
"}\n"
